import tkinter as tk
from tkinter import ttk, messagebox

class Pelanggan:
    def __init__(self, id_pelanggan, nama, kontak, preferensi):
        self.id_pelanggan = id_pelanggan
        self.nama = nama
        self.kontak = kontak
        self.preferensi = preferensi

class Jadwal:
    def __init__(self, id_jadwal, TatoArtist, Waktu):
        self.id_jadwal = id_jadwal
        self.TatoArtist = TatoArtist
        self.Waktu = Waktu

class Reservasi:
    def __init__(self, id_reservasi, id_pelanggan, id_jadwal, status="Pending"):
        self.id_reservasi = id_reservasi
        self.id_pelanggan = id_pelanggan
        self.id_jadwal = id_jadwal
        self.status = status

class DesainTato:
    def __init__(self, id_desain, nama_desain, deskripsi):
        self.id_desain = id_desain
        self.nama_desain = nama_desain
        self.deskripsi = deskripsi

class StudioTato:
    def __init__(self):
        self.pelanggan_list = []
        self.jadwal_list = []
        self.reservasi_list = []
        self.desain_tato_list = []

    def tambah_pelanggan(self, pelanggan):
        self.pelanggan_list.append(pelanggan)

    def tambah_jadwal(self, jadwal):
        self.jadwal_list.append(jadwal)

    def tambah_reservasi(self, reservasi):
        self.reservasi_list.append(reservasi)

    def tambah_desain_tato(self, desain_tato):
        self.desain_tato_list.append(desain_tato)

    def lihat_pelanggan(self):
        return self.pelanggan_list

    def lihat_jadwal(self):
        return self.jadwal_list

    def lihat_reservasi(self):
        return self.reservasi_list

    def lihat_desain_tato(self):
        return self.desain_tato_list

    def update_pelanggan(self, id_pelanggan, nama, kontak, preferensi):
        for pelanggan in self.pelanggan_list:
            if pelanggan.id_pelanggan == id_pelanggan:
                pelanggan.nama = nama
                pelanggan.kontak = kontak
                pelanggan.preferensi = preferensi
                return True
        return False

    def update_jadwal(self, id_jadwal, TatoArtist, Waktu):
        for jadwal in self.jadwal_list:
            if jadwal.id_jadwal == id_jadwal:
                jadwal.TatoArtist = TatoArtist
                jadwal.Waktu = Waktu
                return True
        return False

    def update_reservasi_status(self, id_reservasi, status):
        for reservasi in self.reservasi_list:
            if reservasi.id_reservasi == id_reservasi:
                reservasi.status = status
                return True
        return False

    def update_desain_tato(self, id_desain, nama_desain, deskripsi):
        for desain_tato in self.desain_tato_list:
            if desain_tato.id_desain == id_desain:
                desain_tato.nama_desain = nama_desain
                desain_tato.deskripsi = deskripsi
                return True
        return False

    def hapus_pelanggan(self, id_pelanggan):
        self.pelanggan_list = [pelanggan for pelanggan in self.pelanggan_list if pelanggan.id_pelanggan != id_pelanggan]
        return True

    def hapus_jadwal(self, id_jadwal):
        self.jadwal_list = [jadwal for jadwal in self.jadwal_list if jadwal.id_jadwal != id_jadwal]
        return True

    def hapus_reservasi(self, id_reservasi):
        self.reservasi_list = [reservasi for reservasi in self.reservasi_list if reservasi.id_reservasi != id_reservasi]
        return True

    def hapus_desain_tato(self, id_desain):
        self.desain_tato_list = [desain for desain in self.desain_tato_list if desain.id_desain != id_desain]
        return True

    def sort_list(self, list_name, attribute, reverse=False):
        if list_name == 'pelanggan_list':
            self.pelanggan_list.sort(key=lambda x: getattr(x, attribute), reverse=reverse)
        elif list_name == 'jadwal_list':
            self.jadwal_list.sort(key=lambda x: getattr(x, attribute), reverse=reverse)
        elif list_name == 'reservasi_list':
            self.reservasi_list.sort(key=lambda x: getattr(x, attribute), reverse=reverse)
        elif list_name == 'desain_tato_list':
            self.desain_tato_list.sort(key=lambda x: getattr(x, attribute), reverse=reverse)

    def search_list(self, list_name, attribute, keyword):
        if list_name == 'pelanggan_list':
            return [item for item in self.pelanggan_list if keyword.lower() in str(getattr(item, attribute)).lower()]
        elif list_name == 'jadwal_list':
            return [item for item in self.jadwal_list if keyword.lower() in str(getattr(item, attribute)).lower()]
        elif list_name == 'reservasi_list':
            return [item for item in self.reservasi_list if keyword.lower() in str(getattr(item, attribute)).lower()]
        elif list_name == 'desain_tato_list':
            return [item for item in self.desain_tato_list if keyword.lower() in str(getattr(item, attribute)).lower()]

class ManajemenStudioTatoGUI:
    def __init__(self, root, studio):
        self.root = root
        self.studio = studio
        self.root.title("Manajemen Studio Tato")

        self.tabControl = ttk.Notebook(self.root)

        self.tab_pelanggan = ttk.Frame(self.tabControl)
        self.tabControl.add(self.tab_pelanggan, text="Data Pelanggan")

        self.tab_jadwal = ttk.Frame(self.tabControl)
        self.tabControl.add(self.tab_jadwal, text="Jadwal Tato")

        self.tab_reservasi = ttk.Frame(self.tabControl)
        self.tabControl.add(self.tab_reservasi, text="Reservasi")

        self.tab_desain_tato = ttk.Frame(self.tabControl)
        self.tabControl.add(self.tab_desain_tato, text="Desain Tato")

        self.tabControl.pack(expand=1, fill="both")

        self.create_pelanggan_widgets()
        self.create_jadwal_widgets()
        self.create_reservasi_widgets()
        self.create_desain_tato_widgets()

        self.set_styles()

    def set_styles(self):
        style = ttk.Style()
        style.configure("TFrame", background="#FAF3DD")
        style.configure("TLabel", background="#FAF3DD", font=('Arial', 10))
        style.configure("TButton", background="#FFCAD4", foreground="#000000", font=('Arial', 10, 'bold'))
        style.configure("TEntry", background="#E2F0CB", foreground="#000000")
        style.configure("TCombobox", background="#E2F0CB", foreground="#000000")

    def create_pelanggan_widgets(self):
        frame_input = ttk.Frame(self.tab_pelanggan)
        frame_input.pack(padx=10, pady=10)

        ttk.Label(frame_input, text="ID Pelanggan:").grid(column=0, row=0, padx=5, pady=5)
        self.id_pelanggan_entry = ttk.Entry(frame_input)
        self.id_pelanggan_entry.grid(column=1, row=0, padx=5, pady=5)

        ttk.Label(frame_input, text="Nama:").grid(column=0, row=1, padx=5, pady=5)
        self.nama_entry = ttk.Entry(frame_input)
        self.nama_entry.grid(column=1, row=1, padx=5, pady=5)

        ttk.Label(frame_input, text="Kontak:").grid(column=0, row=2, padx=5, pady=5)
        self.kontak_entry = ttk.Entry(frame_input)
        self.kontak_entry.grid(column=1, row=2, padx=5, pady=5)

        ttk.Label(frame_input, text="Preferensi:").grid(column=0, row=3, padx=5, pady=5)
        self.preferensi_entry = ttk.Entry(frame_input)
        self.preferensi_entry.grid(column=1, row=3, padx=5, pady=5)

        frame_tombol = ttk.Frame(self.tab_pelanggan)
        frame_tombol.pack(padx=10, pady=10)
        ttk.Label(frame_sort_search, text="Search:").grid(column=0, row=1, padx=5, pady=5)
        self.search_entry = ttk.Entry(frame_sort_search)
        self.search_entry.grid(column=1, row=1, padx=5, pady=5)

        self.search_button = ttk.Button(frame_sort_search, text="Search", command=self.search_pelanggan)
        self.search_button.grid(column=2, row=1, padx=5, pady=5)

    def create_jadwal_widgets(self):
        frame_input = ttk.Frame(self.tab_jadwal)
        frame_input.pack(padx=10, pady=10)

        ttk.Label(frame_input, text="ID Jadwal:").grid(column=0, row=0, padx=5, pady=5)
        self.id_jadwal_entry = ttk.Entry(frame_input)
        self.id_jadwal_entry.grid(column=1, row=0, padx=5, pady=5)

        ttk.Label(frame_input, text="Tato Artist:").grid(column=0, row=1, padx=5, pady=5)
        self.tato_artist_entry = ttk.Entry(frame_input)
        self.tato_artist_entry.grid(column=1, row=1, padx=5, pady=5)

        ttk.Label(frame_input, text="Waktu:").grid(column=0, row=2, padx=5, pady=5)
        self.waktu_entry = ttk.Entry(frame_input)
        self.waktu_entry.grid(column=1, row=2, padx=5, pady=5)

        frame_tombol = ttk.Frame(self.tab_jadwal)
        frame_tombol.pack(padx=10, pady=10)

        self.tambah_jadwal_button = ttk.Button(frame_tombol, text="Tambah Jadwal", command=self.tambah_jadwal)
        self.tambah_jadwal_button.grid(column=0, row=0, padx=5, pady=5)

        self.lihat_jadwal_button = ttk.Button(frame_tombol, text="Lihat Jadwal", command=self.lihat_jadwal)
        self.lihat_jadwal_button.grid(column=1, row=0, padx=5, pady=5)

        self.update_jadwal_button = ttk.Button(frame_tombol, text="Update Jadwal", command=self.update_jadwal)
        self.update_jadwal_button.grid(column=2, row=0, padx=5, pady=5)

        self.hapus_jadwal_button = ttk.Button(frame_tombol, text="Hapus Jadwal", command=self.hapus_jadwal)
        self.hapus_jadwal_button.grid(column=3, row=0, padx=5, pady=5)

        frame_data = ttk.Frame(self.tab_jadwal)
        frame_data.pack(padx=10, pady=10)

        self.jadwal_tree = ttk.Treeview(frame_data, columns=("ID Jadwal", "Tato Artist", "Waktu"), show='headings')
        self.jadwal_tree.heading("ID Jadwal", text="ID Jadwal")
        self.jadwal_tree.heading("Tato Artist", text="Tato Artist")
        self.jadwal_tree.heading("Waktu", text="Waktu")
        self.jadwal_tree.pack()

        frame_sort_search = ttk.Frame(self.tab_jadwal)
        frame_sort_search.pack(padx=10, pady=10)

        ttk.Label(frame_sort_search, text="Sort by:").grid(column=0, row=0, padx=5, pady=5)
        self.sort_by_jadwal_combobox = ttk.Combobox(frame_sort_search, values=["id_jadwal", "TatoArtist", "Waktu"])
        self.sort_by_jadwal_combobox.grid(column=1, row=0, padx=5, pady=5)

        self.sort_jadwal_button = ttk.Button(frame_sort_search, text="Sort", command=self.sort_jadwal)
        self.sort_jadwal_button.grid(column=2, row=0, padx=5, pady=5)

        ttk.Label(frame_sort_search, text="Search:").grid(column=0, row=1, padx=5, pady=5)
        self.search_jadwal_entry = ttk.Entry(frame_sort_search)
        self.search_jadwal_entry.grid(column=1, row=1, padx=5, pady=5)

        self.search_jadwal_button = ttk.Button(frame_sort_search, text="Search", command=self.search_jadwal)
        self.search_jadwal_button.grid(column=2, row=1, padx=5, pady=5)

    def create_reservasi_widgets(self):
        frame_reservasi = ttk.Frame(self.tab_reservasi)
        frame_reservasi.pack(padx=10, pady=10)

        ttk.Label(frame_reservasi, text="ID Reservasi:").grid(column=0, row=0, padx=5, pady=5)
        self.id_reservasi_entry = ttk.Entry(frame_reservasi)
        self.id_reservasi_entry.grid(column=1, row=0, padx=5, pady=5)

        ttk.Label(frame_reservasi, text="ID Pelanggan:").grid(column=0, row=1, padx=5, pady=5)
        self.id_pelanggan_reservasi_entry = ttk.Entry(frame_reservasi)
        self.id_pelanggan_reservasi_entry.grid(column=1, row=1, padx=5, pady=5)

        ttk.Label(frame_reservasi, text="ID Jadwal:").grid(column=0, row=2, padx=5, pady=5)
        self.id_jadwal_reservasi_entry = ttk.Entry(frame_reservasi)
        self.id_jadwal_reservasi_entry.grid(column=1, row=2, padx=5, pady=5)

        ttk.Label(frame_reservasi, text="Status:").grid(column=0, row=3, padx=5, pady=5)
        self.status_reservasi_entry = ttk.Entry(frame_reservasi)
        self.status_reservasi_entry.grid(column=1, row=3, padx=5, pady=5)

        frame_tombol_reservasi = ttk.Frame(self.tab_reservasi)
        frame_tombol_reservasi.pack(padx=10, pady=10)

        self.reservasi_button = ttk.Button(frame_tombol_reservasi, text="Tambah Reservasi", command=self.tambah_reservasi)
        self.reservasi_button.grid(column=0, row=0, padx=5, pady=5)

        self.lihat_reservasi_button = ttk.Button(frame_tombol_reservasi, text="Lihat Reservasi", command=self.lihat_reservasi)
        self.lihat_reservasi_button.grid(column=1, row=0, padx=5, pady=5)

        self.update_reservasi_button = ttk.Button(frame_tombol_reservasi, text="Update Reservasi", command=self.update_reservasi)
        self.update_reservasi_button.grid(column=2, row=0, padx=5, pady=5)

        self.hapus_reservasi_button = ttk.Button(frame_tombol_reservasi, text="Hapus Reservasi", command=self.hapus_reservasi)
        self.hapus_reservasi_button.grid(column=3, row=0, padx=5, pady=5)

        frame_data_reservasi = ttk.Frame(self.tab_reservasi)
        frame_data_reservasi.pack(padx=10, pady=10)

        self.reservasi_tree = ttk.Treeview(frame_data_reservasi, columns=("ID Reservasi", "ID Pelanggan", "ID Jadwal", "Status"), show='headings')
        self.reservasi_tree.heading("ID Reservasi", text="ID Reservasi")
        self.reservasi_tree.heading("ID Pelanggan", text="ID Pelanggan")
        self.reservasi_tree.heading("ID Jadwal", text="ID Jadwal")
        self.reservasi_tree.heading("Status", text="Status")
        self.reservasi_tree.pack()

        frame_sort_search = ttk.Frame(self.tab_reservasi)
        frame_sort_search.pack(padx=10, pady=10)

        ttk.Label(frame_sort_search, text="Sort by:").grid(column=0, row=0, padx=5, pady=5)
        self.sort_by_reservasi_combobox = ttk.Combobox(frame_sort_search, values=["id_reservasi", "id_pelanggan", "id_jadwal", "status"])
        self.sort_by_reservasi_combobox.grid(column=1, row=0, padx=5, pady=5)

        self.sort_reservasi_button = ttk.Button(frame_sort_search, text="Sort", command=self.sort_reservasi)
        self.sort_reservasi_button.grid(column=2, row=0, padx=5, pady=5)

        ttk.Label(frame_sort_search, text="Search:").grid(column=0, row=1, padx=5, pady=5)
        self.search_reservasi_entry = ttk.Entry(frame_sort_search)
        self.search_reservasi_entry.grid(column=1, row=1, padx=5, pady=5)

        self.search_reservasi_button = ttk.Button(frame_sort_search, text="Search", command=self.search_reservasi)
        self.search_reservasi_button.grid(column=2, row=1, padx=5, pady=5)

    def create_desain_tato_widgets(self):
        frame_desain_tato = ttk.Frame(self.tab_desain_tato)
        frame_desain_tato.pack(padx=10, pady=10)

        ttk.Label(frame_desain_tato, text="ID Desain:").grid(column=0, row=0, padx=5, pady=5)
        self.id_desain_entry = ttk.Entry(frame_desain_tato)
        self.id_desain_entry.grid(column=1, row=0, padx=5, pady=5)

        ttk.Label(frame_desain_tato, text="Nama Desain:").grid(column=0, row=1, padx=5, pady=5)
        self.nama_desain_entry = ttk.Entry(frame_desain_tato)
        self.nama_desain_entry.grid(column=1, row=1, padx=5, pady=5)

        ttk.Label(frame_desain_tato, text="Deskripsi:").grid(column=0, row=2, padx=5, pady=5)
        self.deskripsi_entry = ttk.Entry(frame_desain_tato)
        self.deskripsi_entry.grid(column=1, row=2, padx=5, pady=5)

        frame_tombol_desain_tato = ttk.Frame(self.tab_desain_tato)
        frame_tombol_desain_tato.pack(padx=10, pady=10)

        self.tambah_desain_button = ttk.Button(frame_tombol_desain_tato, text="Tambah Desain", command=self.tambah_desain_tato)
        self.tambah_desain_button.grid(column=0, row=0, padx=5, pady=5)

        self.lihat_desain_button = ttk.Button(frame_tombol_desain_tato, text="Lihat Desain", command=self.lihat_desain_tato)
        self.lihat_desain_button.grid(column=1, row=0, padx=5, pady=5)

        self.update_desain_button = ttk.Button(frame_tombol_desain_tato, text="Update Desain", command=self.update_desain_tato)
        self.update_desain_button.grid(column=2, row=0, padx=5, pady=5)

        self.hapus_desain_button = ttk.Button(frame_tombol_desain_tato, text="Hapus Desain", command=self.hapus_desain_tato)
        self.hapus_desain_button.grid(column=3, row=0, padx=5, pady=5)

        frame_data_desain_tato = ttk.Frame(self.tab_desain_tato)
        frame_data_desain_tato.pack(padx=10, pady=10)

        self.desain_tree = ttk.Treeview(frame_data_desain_tato, columns=("ID Desain", "Nama Desain", "Deskripsi"), show='headings')
        self.desain_tree.heading("ID Desain", text="ID Desain")
        self.desain_tree.heading("Nama Desain", text="Nama Desain")
        self.desain_tree.heading("Deskripsi", text="Deskripsi")
        self.desain_tree.pack()

        frame_sort_search = ttk.Frame(self.tab_desain_tato)
        frame_sort_search.pack(padx=10, pady=10)

        ttk.Label(frame_sort_search, text="Sort by:").grid(column=0, row=0, padx=5, pady=5)
        self.sort_by_desain_combobox = ttk.Combobox(frame_sort_search, values=["id_desain", "nama_desain", "deskripsi"])
        self.sort_by_desain_combobox.grid(column=1, row=0, padx=5, pady=5)

        self.sort_desain_button = ttk.Button(frame_sort_search, text="Sort", command=self.sort_desain_tato)
        self.sort_desain_button.grid(column=2, row=0, padx=5, pady=5)

        ttk.Label(frame_sort_search, text="Search:").grid(column=0, row=1, padx=5, pady=5)
        self.search_desain_entry = ttk.Entry(frame_sort_search)
        self.search_desain_entry.grid(column=1, row=1, padx=5, pady=5)

        self.search_desain_button = ttk.Button(frame_sort_search, text="Search", command=self.search_desain_tato)
        self.search_desain_button.grid(column=2, row=1, padx=5, pady=5)

    def tambah_pelanggan(self):
        id_pelanggan = self.id_pelanggan_entry.get()
        nama = self.nama_entry.get()
        kontak = self.kontak_entry.get()
        preferensi = self.preferensi_entry.get()

        if id_pelanggan and nama and kontak and preferensi:
            pelanggan = Pelanggan(id_pelanggan, nama, kontak, preferensi)
            self.studio.tambah_pelanggan(pelanggan)
            messagebox.showinfo("Sukses", "Data pelanggan berhasil ditambahkan!")
            self.lihat_pelanggan()
        else:
            messagebox.showerror("Error", "Semua field harus diisi untuk tambah pelanggan!")

    def lihat_pelanggan(self):
        for i in self.tree.get_children():
            self.tree.delete(i)
        pelanggan_list = self.studio.lihat_pelanggan()
        for pelanggan in pelanggan_list:
            self.tree.insert("", "end", values=(pelanggan.id_pelanggan, pelanggan.nama, pelanggan.kontak, pelanggan.preferensi))

    def update_pelanggan(self):
        id_pelanggan = self.id_pelanggan_entry.get()
        nama = self.nama_entry.get()
        kontak = self.kontak_entry.get()
        preferensi = self.preferensi_entry.get()

        if id_pelanggan and nama and kontak and preferensi:
            if self.studio.update_pelanggan(id_pelanggan, nama, kontak, preferensi):
                messagebox.showinfo("Sukses", "Data pelanggan berhasil diupdate!")
                self.lihat_pelanggan()
            else:
                messagebox.showerror("Error", "ID Pelanggan tidak ditemukan!")
        else:
            messagebox.showerror("Error", "Semua field harus diisi untuk update pelanggan!")


        self.tambah_button = ttk.Button(frame_tombol, text="Tambah Pelanggan", command=self.tambah_pelanggan)
        self.tambah_button.grid(column=0, row=0, padx=5, pady=5)

        self.lihat_button = ttk.Button(frame_tombol, text="Lihat Pelanggan", command=self.lihat_pelanggan)
        self.lihat_button.grid(column=1, row=0, padx=5, pady=5)

        self.update_button = ttk.Button(frame_tombol, text="Update Pelanggan", command=self.update_pelanggan)
        self.update_button.grid(column=2, row=0, padx=5, pady=5)

        self.hapus_button = ttk.Button(frame_tombol, text="Hapus Pelanggan", command=self.hapus_pelanggan)
        self.hapus_button.grid(column=3, row=0, padx=5, pady=5)

        frame_data = ttk.Frame(self.tab_pelanggan)
        frame_data.pack(padx=10, pady=10)

        self.tree = ttk.Treeview(frame_data, columns=("ID Pelanggan", "Nama", "Kontak", "Preferensi"), show='headings')
        self.tree.heading("ID Pelanggan", text="ID Pelanggan")
        self.tree.heading("Nama", text="Nama")
        self.tree.heading("Kontak", text="Kontak")
        self.tree.heading("Preferensi", text="Preferensi")
        self.tree.pack()

        frame_sort_search = ttk.Frame(self.tab_pelanggan)
        frame_sort_search.pack(padx=10, pady=10)

        ttk.Label(frame_sort_search, text="Sort by:").grid(column=0, row=0, padx=5, pady=5)
        self.sort_by_combobox = ttk.Combobox(frame_sort_search, values=["id_pelanggan", "nama", "kontak", "preferensi"])
        self.sort_by_combobox.grid(column=1, row=0, padx=5, pady=5)

        self.sort_button = ttk.Button(frame_sort_search, text="Sort", command=self.sort_pelanggan)
        self.sort_button.grid(column=2, row=0, padx=5, pady=5)
  
    def hapus_pelanggan(self):
        id_pelanggan = self.id_pelanggan_entry.get()

        if id_pelanggan:
            if self.studio.hapus_pelanggan(id_pelanggan):
                messagebox.showinfo("Sukses", "Data pelanggan berhasil dihapus!")
                self.lihat_pelanggan()
            else:
                messagebox.showerror("Error", "ID Pelanggan tidak ditemukan!")
        else:
            messagebox.showerror("Error", "Masukkan ID Pelanggan untuk menghapus!")

    def sort_pelanggan(self):
        sort_by = self.sort_by_combobox.get()
        self.studio.sort_list('pelanggan_list', sort_by)
        self.lihat_pelanggan()

    def search_pelanggan(self):
        keyword = self.search_entry.get()
        if keyword:
            results = self.studio.search_list('pelanggan_list', 'nama', keyword)
            for i in self.tree.get_children():
                self.tree.delete(i)
            for pelanggan in results:
                self.tree.insert("", "end", values=(pelanggan.id_pelanggan, pelanggan.nama, pelanggan.kontak, pelanggan.preferensi))
        else:
            messagebox.showerror("Error", "Masukkan kata kunci untuk pencarian!")

    def tambah_jadwal(self):
        id_jadwal = self.id_jadwal_entry.get()
        TatoArtist = self.tato_artist_entry.get()
        Waktu = self.waktu_entry.get()

        if id_jadwal and TatoArtist and Waktu:
            jadwal = Jadwal(id_jadwal, TatoArtist, Waktu)
            self.studio.tambah_jadwal(jadwal)
            messagebox.showinfo("Sukses", "Data jadwal berhasil ditambahkan!")
            self.lihat_jadwal()
        else:
            messagebox.showerror("Error", "Semua field harus diisi untuk tambah jadwal!")

    def lihat_jadwal(self):
        for i in self.jadwal_tree.get_children():
            self.jadwal_tree.delete(i)
        jadwal_list = self.studio.lihat_jadwal()
        for jadwal in jadwal_list:
            self.jadwal_tree.insert("", "end", values=(jadwal.id_jadwal, jadwal.TatoArtist, jadwal.Waktu))

    def update_jadwal(self):
        id_jadwal = self.id_jadwal_entry.get()
        TatoArtist = self.tato_artist_entry.get()
        Waktu = self.waktu_entry.get()

        if id_jadwal and TatoArtist and Waktu:
            if self.studio.update_jadwal(id_jadwal, TatoArtist, Waktu):
                messagebox.showinfo("Sukses", "Data jadwal berhasil diupdate!")
                self.lihat_jadwal()
            else:
                messagebox.showerror("Error", "ID Jadwal tidak ditemukan!")
        else:
            messagebox.showerror("Error", "Semua field harus diisi untuk update jadwal!")

    def hapus_jadwal(self):
        id_jadwal = self.id_jadwal_entry.get()

        if id_jadwal:
            if self.studio.hapus_jadwal(id_jadwal):
                messagebox.showinfo("Sukses", "Data jadwal berhasil dihapus!")
                self.lihat_jadwal()
            else:
                messagebox.showerror("Error", "ID Jadwal tidak ditemukan!")
        else:
            messagebox.showerror("Error", "Masukkan ID Jadwal untuk menghapus!")

    def sort_jadwal(self):
        sort_by = self.sort_by_jadwal_combobox.get()
        self.studio.sort_list('jadwal_list', sort_by)
        self.lihat_jadwal()

    def search_jadwal(self):
        keyword = self.search_jadwal_entry.get()
        if keyword:
            results = self.studio.search_list('jadwal_list', 'TatoArtist', keyword)
            for i in self.jadwal_tree.get_children():
                self.jadwal_tree.delete(i)
            for jadwal in results:
                self.jadwal_tree.insert("", "end", values=(jadwal.id_jadwal, jadwal.TatoArtist, jadwal.Waktu))
        else:
            messagebox.showerror("Error", "Masukkan kata kunci untuk pencarian!")

    def tambah_reservasi(self):
        id_reservasi = self.id_reservasi_entry.get()
        id_pelanggan = self.id_pelanggan_reservasi_entry.get()
        id_jadwal = self.id_jadwal_reservasi_entry.get()
        status = self.status_reservasi_entry.get()

        if id_reservasi and id_pelanggan and id_jadwal and status:
            reservasi = Reservasi(id_reservasi, id_pelanggan, id_jadwal, status)
            self.studio.tambah_reservasi(reservasi)
            messagebox.showinfo("Sukses", "Reservasi berhasil ditambahkan!")
            self.lihat_reservasi()
        else:
            messagebox.showerror("Error", "Semua field harus diisi untuk reservasi!")

    def lihat_reservasi(self):
        for i in self.reservasi_tree.get_children():
            self.reservasi_tree.delete(i)
        reservasi_list = self.studio.lihat_reservasi()
        for reservasi in reservasi_list:
            self.reservasi_tree.insert("", "end", values=(reservasi.id_reservasi, reservasi.id_pelanggan, reservasi.id_jadwal, reservasi.status))

    def update_reservasi(self):
        id_reservasi = self.id_reservasi_entry.get()
        id_pelanggan = self.id_pelanggan_reservasi_entry.get()
        id_jadwal = self.id_jadwal_reservasi_entry.get()
        status = self.status_reservasi_entry.get()

        if id_reservasi and id_pelanggan and id_jadwal and status:
            if self.studio.update_reservasi_status(id_reservasi, status):
                messagebox.showinfo("Sukses", "Status reservasi berhasil diupdate!")
                self.lihat_reservasi()
            else:
                messagebox.showerror("Error", "ID Reservasi tidak ditemukan!")
        else:
            messagebox.showerror("Error", "Semua field harus diisi untuk update reservasi!")

    def hapus_reservasi(self):
        id_reservasi = self.id_reservasi_entry.get()

        if id_reservasi:
            if self.studio.hapus_reservasi(id_reservasi):
                messagebox.showinfo("Sukses", "Data reservasi berhasil dihapus!")
                self.lihat_reservasi()
            else:
                messagebox.showerror("Error", "ID Reservasi tidak ditemukan!")
        else:
            messagebox.showerror("Error", "Masukkan ID Reservasi untuk menghapus!")

    def sort_reservasi(self):
        sort_by = self.sort_by_reservasi_combobox.get()
        self.studio.sort_list('reservasi_list', sort_by)
        self.lihat_reservasi()

    def search_reservasi(self):
        keyword = self.search_reservasi_entry.get()
        if keyword:
            results = self.studio.search_list('reservasi_list', 'id_reservasi', keyword)
            for i in self.reservasi_tree.get_children():
                self.reservasi_tree.delete(i)
            for reservasi in results:
                self.reservasi_tree.insert("", "end", values=(reservasi.id_reservasi, reservasi.id_pelanggan, reservasi.id_jadwal, reservasi.status))
        else:
            messagebox.showerror("Error", "Masukkan kata kunci untuk pencarian!")

    def tambah_desain_tato(self):
        id_desain = self.id_desain_entry.get()
        nama_desain = self.nama_desain_entry.get()
        deskripsi = self.deskripsi_entry.get()

        if id_desain and nama_desain and deskripsi:
            desain_tato = DesainTato(id_desain, nama_desain, deskripsi)
            self.studio.tambah_desain_tato(desain_tato)
            messagebox.showinfo("Sukses", "Desain Tato berhasil ditambahkan!")
            self.lihat_desain_tato()
        else:
            messagebox.showerror("Error", "Semua field harus diisi untuk tambah desain tato!")

    def lihat_desain_tato(self):
        for i in self.desain_tree.get_children():
            self.desain_tree.delete(i)
        desain_tato_list = self.studio.lihat_desain_tato()
        for desain_tato in desain_tato_list:
            self.desain_tree.insert("", "end", values=(desain_tato.id_desain, desain_tato.nama_desain, desain_tato.deskripsi))

    def update_desain_tato(self):
        id_desain = self.id_desain_entry.get()
        nama_desain = self.nama_desain_entry.get()
        deskripsi = self.deskripsi_entry.get()

        if id_desain and nama_desain and deskripsi:
            if self.studio.update_desain_tato(id_desain, nama_desain, deskripsi):
                messagebox.showinfo("Sukses", "Desain Tato berhasil diupdate!")
                self.lihat_desain_tato()
            else:
                messagebox.showerror("Error", "ID Desain tidak ditemukan!")
        else:
            messagebox.showerror("Error", "Semua field harus diisi untuk update desain tato!")

    def hapus_desain_tato(self):
        id_desain = self.id_desain_entry.get()

        if id_desain:
            if self.studio.hapus_desain_tato(id_desain):
                messagebox.showinfo("Sukses", "Desain Tato berhasil dihapus!")
                self.lihat_desain_tato()
            else:
                messagebox.showerror("Error", "ID Desain tidak ditemukan!")
        else:
            messagebox.showerror("Error", "Masukkan ID Desain untuk menghapus!")

    def sort_desain_tato(self):
        sort_by = self.sort_by_desain_combobox.get()
        self.studio.sort_list('desain_tato_list', sort_by)
        self.lihat_desain_tato()

    def search_desain_tato(self):
        keyword = self.search_desain_entry.get()
        if keyword:
            results = self.studio.search_list('desain_tato_list', 'nama_desain', keyword)
            for i in self.desain_tree.get_children():
                self.desain_tree.delete(i)
            for desain_tato in results:
                self.desain_tree.insert("", "end", values=(desain_tato.id_desain, desain_tato.nama_desain, desain_tato.deskripsi))
        else:
            messagebox.showerror("Error", "Masukkan kata kunci untuk pencarian!")

if __name__ == "__main__":
    root = tk.Tk()
    studio = StudioTato()
    app = ManajemenStudioTatoGUI(root, studio)
    root.mainloop()
