import tkinter as tk
from tkinter import ttk, messagebox
from collections import deque

class Pelanggan:
    def __init__(self, id_pelanggan, nama, kontak, preferensi):
        self.id_pelanggan = id_pelanggan
        self.nama = nama
        self.kontak = kontak
        self.preferensi = preferensi

class StudioTato:
    def __init__(self):
        self.pelanggan_list = []
        self.antrian_reservasi = deque()

    def tambah_pelanggan(self, pelanggan):
        self.pelanggan_list.append(pelanggan)

    def lihat_pelanggan(self):
        return self.pelanggan_list

    def update_pelanggan(self, id_pelanggan, nama, kontak, preferensi):
        for pelanggan in self.pelanggan_list:
            if pelanggan.id_pelanggan == id_pelanggan:
                pelanggan.nama = nama
                pelanggan.kontak = kontak
                pelanggan.preferensi = preferensi
                return True
        return False

    def hapus_pelanggan(self, id_pelanggan):
        for pelanggan in self.pelanggan_list:
            if pelanggan.id_pelanggan == id_pelanggan:
                self.pelanggan_list.remove(pelanggan)
                return True
        return False

    def tambah_reservasi(self, id_pelanggan):
        self.antrian_reservasi.append(id_pelanggan)

    def hapus_reservasi(self, id_pelanggan):
        try:
            self.antrian_reservasi.remove(id_pelanggan)
            return True
        except ValueError:
            return False

    def lihat_antrian(self):
        return list(self.antrian_reservasi)

    def proses_reservasi(self):
        if self.antrian_reservasi:
            return self.antrian_reservasi.popleft()
        return None

class ManajemenStudioTatoGUI:
    def __init__(self, root, studio):
        self.root = root
        self.root.title("Manajemen Studio Tato")
        self.studio = studio
        self.create_widgets()

    def create_widgets(self):
        self.tab_control = ttk.Notebook(self.root)

        self.tab_pelanggan = ttk.Frame(self.tab_control)
        self.tab_reservasi = ttk.Frame(self.tab_control)

        self.tab_control.add(self.tab_pelanggan, text='Pelanggan')
        self.tab_control.add(self.tab_reservasi, text='Reservasi')

        self.tab_control.pack(expand=1, fill='both')

        self.create_pelanggan_widgets()
        self.create_reservasi_widgets()

    def create_pelanggan_widgets(self):
        frame_input = ttk.Frame(self.tab_pelanggan)
        frame_input.pack(padx=10, pady=10)

        ttk.Label(frame_input, text="ID Pelanggan:").grid(column=0, row=0, padx=5, pady=5)
        self.id_pelanggan_entry = ttk.Entry(frame_input)
        self.id_pelanggan_entry.grid(column=1, row=0, padx=5, pady=5)

        ttk.Label(frame_input, text="Nama:").grid(column=0, row=1, padx=5, pady=5)
        self.nama_entry = ttk.Entry(frame_input)
        self.nama_entry.grid(column=1, row=1, padx=5, pady=5)

        ttk.Label(frame_input, text="Kontak:").grid(column=0, row=2, padx=5, pady=5)
        self.kontak_entry = ttk.Entry(frame_input)
        self.kontak_entry.grid(column=1, row=2, padx=5, pady=5)

        ttk.Label(frame_input, text="Preferensi:").grid(column=0, row=3, padx=5, pady=5)
        self.preferensi_entry = ttk.Entry(frame_input)
        self.preferensi_entry.grid(column=1, row=3, padx=5, pady=5)

        frame_tombol = ttk.Frame(self.tab_pelanggan)
        frame_tombol.pack(padx=10, pady=10)

        self.tambah_button = ttk.Button(frame_tombol, text="Tambah Pelanggan", command=self.tambah_pelanggan)
        self.tambah_button.grid(column=0, row=0, padx=5, pady=5)

        self.lihat_button = ttk.Button(frame_tombol, text="Lihat Pelanggan", command=self.lihat_pelanggan)
        self.lihat_button.grid(column=1, row=0, padx=5, pady=5)

        self.update_button = ttk.Button(frame_tombol, text="Update Pelanggan", command=self.update_pelanggan)
        self.update_button.grid(column=2, row=0, padx=5, pady=5)

        self.hapus_button = ttk.Button(frame_tombol, text="Hapus Pelanggan", command=self.hapus_pelanggan)
        self.hapus_button.grid(column=3, row=0, padx=5, pady=5)

        frame_data = ttk.Frame(self.tab_pelanggan)
        frame_data.pack(padx=10, pady=10)

        self.tree = ttk.Treeview(frame_data, columns=("ID Pelanggan", "Nama", "Kontak", "Preferensi"), show='headings')
        self.tree.heading("ID Pelanggan", text="ID Pelanggan")
        self.tree.heading("Nama", text="Nama")
        self.tree.heading("Kontak", text="Kontak")
        self.tree.heading("Preferensi", text="Preferensi")
        self.tree.pack()

    def create_reservasi_widgets(self):
        frame_input_reservasi = ttk.Frame(self.tab_reservasi)
        frame_input_reservasi.pack(padx=10, pady=10)

        ttk.Label(frame_input_reservasi, text="ID Pelanggan:").grid(column=0, row=0, padx=5, pady=5)
        self.id_pelanggan_reservasi_entry = ttk.Entry(frame_input_reservasi)
        self.id_pelanggan_reservasi_entry.grid(column=1, row=0, padx=5, pady=5)

        frame_tombol_reservasi = ttk.Frame(self.tab_reservasi)
        frame_tombol_reservasi.pack(padx=10, pady=10)

        self.tambah_reservasi_button = ttk.Button(frame_tombol_reservasi, text="Tambah Reservasi", command=self.tambah_reservasi)
        self.tambah_reservasi_button.grid(column=0, row=0, padx=5, pady=5)

        self.hapus_reservasi_button = ttk.Button(frame_tombol_reservasi, text="Hapus Reservasi", command=self.hapus_reservasi)
        self.hapus_reservasi_button.grid(column=1, row=0, padx=5, pady=5)

        self.lihat_antrian_button = ttk.Button(frame_tombol_reservasi, text="Lihat Antrian", command=self.lihat_antrian)
        self.lihat_antrian_button.grid(column=2, row=0, padx=5, pady=5)

        self.proses_reservasi_button = ttk.Button(frame_tombol_reservasi, text="Proses Reservasi", command=self.proses_reservasi)
        self.proses_reservasi_button.grid(column=3, row=0, padx=5, pady=5)

        frame_data_reservasi = ttk.Frame(self.tab_reservasi)
        frame_data_reservasi.pack(padx=10, pady=10)

        self.tree_reservasi = ttk.Treeview(frame_data_reservasi, columns=("ID Pelanggan",), show='headings')
        self.tree_reservasi.heading("ID Pelanggan", text="ID Pelanggan")
        self.tree_reservasi.pack()

    def tambah_pelanggan(self):
        id_pelanggan = self.id_pelanggan_entry.get()
        nama = self.nama_entry.get()
        kontak = self.kontak_entry.get()
        preferensi = self.preferensi_entry.get()

        if id_pelanggan and nama and kontak and preferensi:
            pelanggan = Pelanggan(id_pelanggan, nama, kontak, preferensi)
            self.studio.tambah_pelanggan(pelanggan)
            messagebox.showinfo("Sukses", "Pelanggan berhasil ditambahkan!")
            self.lihat_pelanggan()
        else:
            messagebox.showerror("Error", "Semua field harus diisi!")

    def lihat_pelanggan(self):
        for i in self.tree.get_children():
            self.tree.delete(i)
        pelanggan_list = self.studio.lihat_pelanggan()
        for pelanggan in pelanggan_list:
            self.tree.insert("", "end", values=(pelanggan.id_pelanggan, pelanggan.nama, pelanggan.kontak, pelanggan.preferensi))

    def update_pelanggan(self):
        id_pelanggan = self.id_pelanggan_entry.get()
        nama = self.nama_entry.get()
        kontak = self.kontak_entry.get()
        preferensi = self.preferensi_entry.get()

        if id_pelanggan and nama and kontak and preferensi:
            if self.studio.update_pelanggan(id_pelanggan, nama, kontak, preferensi):
                messagebox.showinfo("Sukses", "Pelanggan berhasil diupdate!")
                self.lihat_pelanggan()
            else:
                messagebox.showerror("Error", "ID Pelanggan tidak ditemukan!")
        else:
            messagebox.showerror("Error", "Semua field harus diisi!")

    def hapus_pelanggan(self):
        id_pelanggan = self.id_pelanggan_entry.get()

        if id_pelanggan:
            if self.studio.hapus_pelanggan(id_pelanggan):
                messagebox.showinfo("Sukses", "Pelanggan berhasil dihapus!")
                self.lihat_pelanggan()
            else:
                messagebox.showerror("Error", "ID Pelanggan tidak ditemukan!")
        else:
            messagebox.showerror("Error", "ID Pelanggan harus diisi!")

    def tambah_reservasi(self):
        id_pelanggan = self.id_pelanggan_reservasi_entry.get()

        if id_pelanggan:
            self.studio.tambah_reservasi(id_pelanggan)
            messagebox.showinfo("Sukses", "Reservasi berhasil ditambahkan!")
            self.lihat_antrian()
        else:
            messagebox.showerror("Error", "ID Pelanggan harus diisi!")

    def hapus_reservasi(self):
        id_pelanggan = self.id_pelanggan_reservasi_entry.get()

        if id_pelanggan:
            if self.studio.hapus_reservasi(id_pelanggan):
                messagebox.showinfo("Sukses", "Reservasi berhasil dihapus dari antrian!")
                self.lihat_antrian()
            else:
                messagebox.showerror("Error", "ID Pelanggan tidak ditemukan dalam antrian!")
        else:
            messagebox.showerror("Error", "ID Pelanggan harus diisi!")

    def lihat_antrian(self):
        for i in self.tree_reservasi.get_children():
            self.tree_reservasi.delete(i)
        antrian_list = self.studio.lihat_antrian()
        for id_pelanggan in antrian_list:
            self.tree_reservasi.insert("", "end", values=(id_pelanggan,))

    def proses_reservasi(self):
        id_pelanggan = self.studio.proses_reservasi()
        if id_pelanggan:
            messagebox.showinfo("Sukses", f"Reservasi untuk ID Pelanggan {id_pelanggan} telah diproses!")
            self.lihat_antrian()
        else:
            messagebox.showerror("Error", "Tidak ada reservasi dalam antrian!")

if __name__ == "__main__":
    root = tk.Tk()
    studio = StudioTato()
    app = ManajemenStudioTatoGUI(root, studio)
    root.mainloop()
